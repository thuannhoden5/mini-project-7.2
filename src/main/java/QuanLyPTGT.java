
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import static java.sql.DriverManager.getConnection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author nguyentienthuan
 */
public class QuanLyPTGT extends javax.swing.JFrame {

    //Khai báo model của table để lưu giữ dữ liệu
    private static DefaultTableModel mdTblPhuongTien;
    //Khai báo ArrayList lưu trữ danh sách phương tiện thực sự
    private ArrayList<PTGT> phuongTien;
    //Khai báo biến lưu trữ vị trí dòng (row) được chọn.
    private int selectedIndex = -1;
    private static String DB_URL = "jdbc:mysql://localhost:3306/PHUONGTIEN?zeroDateTimeBehavior=CONVERT_TO_NULL";
    private static String USER_NAME = "root";
    private static String PASSWORD = "Thuan12112000@";
    Connection con = null;
    Statement st = null;
    ResultSet rs;

    /**
     * Creates new form QuanLyPTGT
     */
    public QuanLyPTGT() {
        initComponents();
        myInit();

    }

    public static Connection getConnection(String dbURL, String userName,
            String password) {
        Connection conn = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(dbURL, userName, password);
            System.out.println("connect successfully!");
        } catch (Exception ex) {
            System.out.println("connect failure!");
            ex.printStackTrace();
        }
        return conn;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cboLoaiPhuongTien = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cboNamSanXuat = new javax.swing.JComboBox<>();
        txtGiaBan = new javax.swing.JTextField();
        cboMau = new javax.swing.JComboBox<>();
        txtKieuDongCo = new javax.swing.JTextField();
        cboSoChoNgoi = new javax.swing.JComboBox<>();
        txtCongSuat = new javax.swing.JTextField();
        txtTrongTai = new javax.swing.JTextField();
        txtTuKhoaTimKiem = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnCapNhat = new javax.swing.JButton();
        btnTimKiem = new javax.swing.JButton();
        btnTimKiemTheoHang = new javax.swing.JButton();
        btnLamMoi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPhuongTien = new javax.swing.JTable();
        txtHangSanXuat = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(java.awt.Color.black);

        jLabel1.setBackground(new java.awt.Color(255, 204, 204));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("QUẢN LÝ PHƯƠNG TIỆN GIAO THÔNG");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabel1.setSize(new java.awt.Dimension(300, 70));

        jLabel3.setBackground(new java.awt.Color(0, 204, 153));
        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 255));
        jLabel3.setText("Loại phương tiện");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 255));
        jLabel4.setText("Hãng sản xuất");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 255));
        jLabel5.setText("Năm sản xuất");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 255));
        jLabel6.setText("Giá bán");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 255));
        jLabel7.setText("Kiểu động cơ");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 255));
        jLabel8.setText("Số chỗ ngồi");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 255));
        jLabel9.setText("Công suất");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 255));
        jLabel10.setText("Trọng tải");

        cboLoaiPhuongTien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ô tô", "Xe máy", "Xe tải" }));
        cboLoaiPhuongTien.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboLoaiPhuongTienItemStateChanged(evt);
            }
        });
        cboLoaiPhuongTien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiPhuongTienActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 255));
        jLabel11.setText("Màu");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 153, 255));
        jLabel12.setText("Tìm kiếm theo hãng");

        cboNamSanXuat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboNamSanXuatItemStateChanged(evt);
            }
        });

        txtGiaBan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGiaBanActionPerformed(evt);
            }
        });

        cboMau.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Trắng", "Đen", "Đỏ", "Xanh", "Vàng" }));

        cboSoChoNgoi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "4", "5", "7", "9", "12", "16", "24", "30", "45" }));

        txtTuKhoaTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTuKhoaTimKiemActionPerformed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnXoa.setText("Xoá");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnCapNhat.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnCapNhat.setText("Cập nhật");
        btnCapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCapNhatActionPerformed(evt);
            }
        });

        btnTimKiem.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnTimKiem.setText("Tìm kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        btnTimKiemTheoHang.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnTimKiemTheoHang.setText("Tìm kiếm theo hãng");
        btnTimKiemTheoHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemTheoHangActionPerformed(evt);
            }
        });

        btnLamMoi.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnLamMoi.setText("Làm mới");
        btnLamMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLamMoiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnThem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnXoa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCapNhat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTimKiem)
                .addGap(46, 46, 46)
                .addComponent(btnTimKiemTheoHang)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLamMoi)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThem)
                    .addComponent(btnXoa)
                    .addComponent(btnCapNhat)
                    .addComponent(btnTimKiem)
                    .addComponent(btnTimKiemTheoHang)
                    .addComponent(btnLamMoi))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        tblPhuongTien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Loại phương tiện", "Hãng sản xuất", "Năm sản xuất", "Giá bán", "Màu", "Kiểu động cơ", "Số chỗ ngồi", "Công suất", "Trọng tải"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPhuongTien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhuongTienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPhuongTien);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(38, 38, 38)
                        .addComponent(cboLoaiPhuongTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboNamSanXuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboMau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtHangSanXuat, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cboSoChoNgoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCongSuat, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(txtTrongTai)
                    .addComponent(txtTuKhoaTimKiem)
                    .addComponent(txtKieuDongCo))
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(141, 141, 141))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7)
                    .addComponent(cboLoaiPhuongTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKieuDongCo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(cboSoChoNgoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHangSanXuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9)
                    .addComponent(cboNamSanXuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCongSuat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10)
                    .addComponent(txtGiaBan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTrongTai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(cboMau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTuKhoaTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        //Thực hiện chức năng thêm đúng loại phương tiện danh sách phuongTiens
        //Tương ứng với loại phương tiện được chọn
        phuongTien.clear();
        xoaDuLieuCuTrongModelTable();
        switch (cboLoaiPhuongTien.getSelectedItem().toString()) {
            case "Ô tô":
               try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
                String query = " INSERT INTO phuongtien.oto (kieuDongCo, soChoNgoi, hangSanXuat, namSanXuat, mau, giaBan)" + " VALUES ('" + txtKieuDongCo.getText().trim() + "'," + Integer.parseInt(cboSoChoNgoi.getSelectedItem().toString()) + ", '" + txtHangSanXuat.getText().trim() + "'," + Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()) + ", '" + cboMau.getSelectedItem().toString() + "'," + Double.parseDouble(txtGiaBan.getText().trim()) + ");";

                phuongTien.add(new OTo(txtKieuDongCo.getText().trim(),
                        Integer.parseInt(cboSoChoNgoi.getSelectedItem().toString()),
                        txtHangSanXuat.getText().trim(),
                        Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()),
                        cboMau.getSelectedItem().toString(),
                        Double.parseDouble(txtGiaBan.getText().trim())
                ));

                stmt.execute(query);
                System.out.println("insert success");
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println("can not insert data to PHUONGTIEN.OTo");
            }
//            public OTo(String kieuDongCo, int soChoNgoi, String hangSanXuat, int namSanXuat, String mau, double giaBan) {
            break;
            case "Xe máy":
                
                //public XeMay(int congSuat, String hangSanXuat, int namSanXuat, String mau, double giaBan) {
                try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
                phuongTien.add(new XeMay(Integer.parseInt(txtCongSuat.getText().trim()),
                        txtHangSanXuat.getText().trim(),
                        Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()),
                        cboMau.getSelectedItem().toString(),
                        Double.parseDouble(txtGiaBan.getText().trim())));

//                ResultSet rs = stmt.executeQuery(SQL);
                // the mysql insert statement
                String query = " INSERT INTO phuongtien.xemay (congSuat, hangSanXuat, namSanXuat, mau, giaBan)" + " VALUES (" + Integer.parseInt(txtCongSuat.getText().trim()) + ", '" + txtHangSanXuat.getText().trim() + "'," + Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()) + ", '" + cboMau.getSelectedItem().toString() + "'," + Double.parseDouble(txtGiaBan.getText().trim()) + ");";
                stmt.execute(query);
                System.out.println("them thanh cong xe may");
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println("can not insert data to PHUONGTIEN.XeMay");
            }
            break;

            case "Xe tải":
                
                //public XeTai(double trongTai, String hangSanXuat, int namSanXuat, String mau, double giaBan) {
                try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
                // the mysql insert statement
                phuongTien.add(new XeTai(Double.parseDouble(txtTrongTai.getText().trim()),
                        txtHangSanXuat.getText().trim(),
                        Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()),
                        cboMau.getSelectedItem().toString(),
                        Double.parseDouble(txtGiaBan.getText().trim())));
                String query = " INSERT INTO phuongtien.xetai (trongTai, hangSanXuat, namSanXuat, mau, giaBan)" + " VALUES (" + Double.parseDouble(txtTrongTai.getText().trim()) + ", '" + txtHangSanXuat.getText().trim() + "'," + Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()) + ", '" + cboMau.getSelectedItem().toString() + "'," + Double.parseDouble(txtGiaBan.getText().trim()) + ");";
                System.out.println("them duoc xe tai roi");
                stmt.execute(query);
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println("can not insert data to PHUONGTIEN.XeTai");
            }
            break;

        }

        //Nạp dữ liệu trong phuongTien vào table
        loadDataIntoTable();
    }                                       

    private void txtGiaBanActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void txtTuKhoaTimKiemActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    private void cboNamSanXuatItemStateChanged(java.awt.event.ItemEvent evt) {                                               
        // TODO add your handling code here:

    }                                              

    private void cboLoaiPhuongTienItemStateChanged(java.awt.event.ItemEvent evt) {                                                   
        // TODO add your handling code here:
        switch (cboLoaiPhuongTien.getSelectedItem().toString()) {
            case "Ô tô":
                txtKieuDongCo.setEnabled(true);
                cboSoChoNgoi.setEnabled(true);
                txtCongSuat.setEnabled(false);
                txtTrongTai.setEnabled(false);
                break;
            case "Xe máy":
                txtKieuDongCo.setEnabled(false);
                cboSoChoNgoi.setEnabled(false);
                txtCongSuat.setEnabled(true);
                txtTrongTai.setEnabled(false);
                break;
            case "Xe tải":
                txtKieuDongCo.setEnabled(false);
                cboSoChoNgoi.setEnabled(false);
                txtCongSuat.setEnabled(false);
                txtTrongTai.setEnabled(true);
                break;
        }
    }                                                  

    private void tblPhuongTienMouseClicked(java.awt.event.MouseEvent evt) {                                           
        // TODO add your handling code here:
        selectedIndex = tblPhuongTien.getSelectedRow();
        //Nếu người dùng kích đúp chuột chuẩn bị cho việc cập nhập
        // Tiến hành nạp dữ liệu tại dòng kích đúp lên các điều khiển
        // Cho phép người dùng thay đổi dữ liệu
        if (evt.getClickCount() == 2 && selectedIndex != -1) {
            //Các số đại diện cho chủ mục index của các cột trong table
            setSelectedItemsForCbo(selectedIndex, 1, cboLoaiPhuongTien);
            setSelectedItemsForCbo(selectedIndex, 3, cboNamSanXuat);
            setSelectedItemsForCbo(selectedIndex, 5, cboMau);
            setSelectedItemsForCbo(selectedIndex, 7, cboSoChoNgoi);

            setTextForTextFiled(selectedIndex, 2, txtHangSanXuat);
            setTextForTextFiled(selectedIndex, 4, txtGiaBan);
            setTextForTextFiled(selectedIndex, 6, txtKieuDongCo);
            setTextForTextFiled(selectedIndex, 8, txtCongSuat);
            setTextForTextFiled(selectedIndex, 9, txtTrongTai);
        }

    }                                          

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        //Đảm bảo có dòng được chọn để xóa
        
        if (selectedIndex != -1) {
            // Xóa dữ liệu tại dòng được chọn trong model= 

          
            if ((String) mdTblPhuongTien.getValueAt(selectedIndex, 1) == "Ô tô") {
                try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
                    String query = "DELETE FROM phuongtien.oto WHERE kieuDongCo = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 6) + "' AND soChoNgoi = " + Integer.parseInt((String) mdTblPhuongTien.getValueAt(selectedIndex, 7)) + " AND hangSanXuat = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 2) + "' AND namSanXuat = " + Integer.parseInt((String) mdTblPhuongTien.getValueAt(selectedIndex, 3)) + " AND mau = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 5) + "' AND giaBan = " + Double.parseDouble((String) mdTblPhuongTien.getValueAt(selectedIndex, 4)) + ";";
                    System.out.println("delete success");
                    stmt.execute(query);
                    mdTblPhuongTien.removeRow(selectedIndex);
                    phuongTien.remove(selectedIndex);
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    System.out.println("can not delete data to PHUONGTIEN.OTo");
                }
            } else if (mdTblPhuongTien.getValueAt(selectedIndex, 1) == "Xe máy") {
                try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
                    String query = "DELETE FROM phuongtien.xemay WHERE congSuat = " + Integer.parseInt((String) mdTblPhuongTien.getValueAt(selectedIndex, 8)) + " AND hangSanXuat = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 2) + "' AND namSanXuat = " + Integer.parseInt((String) mdTblPhuongTien.getValueAt(selectedIndex, 3)) + " AND mau = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 5) + "' AND giaBan = " + Double.parseDouble((String) mdTblPhuongTien.getValueAt(selectedIndex, 4)) + ";";
                    System.out.println("delete success");
                    stmt.execute(query);
                    mdTblPhuongTien.removeRow(selectedIndex);
                    phuongTien.remove(selectedIndex);
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    System.out.println("can not delete data to PHUONGTIEN.OTo");
                }
            } else if (mdTblPhuongTien.getValueAt(selectedIndex, 1) == "Xe tải") {
                try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
                    String query = "DELETE FROM phuongtien.xetai WHERE trongTai = " + Double.parseDouble((String) mdTblPhuongTien.getValueAt(selectedIndex, 9)) + " AND hangSanXuat = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 2) + "' AND namSanXuat = " + Integer.parseInt((String) mdTblPhuongTien.getValueAt(selectedIndex, 3)) + " AND mau = '" + (String) mdTblPhuongTien.getValueAt(selectedIndex, 5) + "' AND giaBan = " + Double.parseDouble((String) mdTblPhuongTien.getValueAt(selectedIndex, 4)) + ";";

                    stmt.execute(query);
                    System.out.println("delete success");
                    mdTblPhuongTien.removeRow(selectedIndex);
                    phuongTien.remove(selectedIndex);
                    con.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                    System.out.println("can not delete data to PHUONGTIEN.XeTai");
                }
            }
           

//            System.out.println(mdTblPhuongTien.getValueAt(selectedIndex, 1));
            //Trả về trạng thái chưa có dòng nào được chọn.
        }
    }                                      

    private void btnCapNhatActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (selectedIndex != -1) {
            switch (cboLoaiPhuongTien.getSelectedItem().toString()) {
                case "Ô tô":
                    
                    phuongTien.set(selectedIndex, new OTo(txtKieuDongCo.getText().trim(),
                            Integer.parseInt(cboSoChoNgoi.getSelectedItem().toString()),
                            txtHangSanXuat.getText().trim(),
                            Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()),
                            cboMau.getSelectedItem().toString(),
                            Double.parseDouble(txtGiaBan.getText().trim())
                    ));
                   
                    // nho la add theo danh sach khai bao tu constructor cua moi lop cong tuong ung, co thua ke nhe
                    
                    break;
//                    

                    
                case "Xe máy":
                    phuongTien.set(selectedIndex, new XeMay(Integer.parseInt(txtCongSuat.getText().trim()),
                            txtHangSanXuat.getText().trim(),
                            Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()),
                            cboMau.getSelectedItem().toString(),
                            Double.parseDouble(txtGiaBan.getText().trim())));
                    //public XeMay(int congSuat, String hangSanXuat, int namSanXuat, String mau, double giaBan) {
                    
                    break;
                case "Xe tải":
                    phuongTien.set(selectedIndex, new XeTai(Double.parseDouble(txtTrongTai.getText().trim()),
                            txtHangSanXuat.getText().trim(),
                            Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()),
                            cboMau.getSelectedItem().toString(),
                            Double.parseDouble(txtGiaBan.getText().trim())));
                    //public XeTai(double trongTai, String hangSanXuat, int namSanXuat, String mau, double giaBan) {
                    
                    break;

            }
            //Nạp dữ liệu trong phuongTiens vào table
            loadDataIntoTable();
        }
    }                                          

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        phuongTien.clear();
        xoaDuLieuCuTrongModelTable();
        String loaiPhuongTien, kieuDongCo, soChoNgoi, congSuat, trongTai;
        int stt = 0;
        // Xóa dữ liệu cũ trong model của table

        loadDataFromDb();

        for (PTGT ptgt : phuongTien) {
            System.out.println(ptgt.getHangSanXuat().trim().equalsIgnoreCase(txtHangSanXuat.getText().trim()) && (ptgt.getGiaBan() == Double.parseDouble(txtGiaBan.getText().trim())) && (ptgt.getMau().equalsIgnoreCase(cboMau.getSelectedItem().toString())) && (ptgt.getNamSanXuat() == Integer.parseInt(cboNamSanXuat.getSelectedItem().toString())));
            if (ptgt.getHangSanXuat().trim().equalsIgnoreCase(txtHangSanXuat.getText().trim()) && (ptgt.getGiaBan() == Double.parseDouble(txtGiaBan.getText().trim())) && (ptgt.getMau().equalsIgnoreCase(cboMau.getSelectedItem().toString())) && (ptgt.getNamSanXuat() == Integer.parseInt(cboNamSanXuat.getSelectedItem().toString()))) {
                loaiPhuongTien = kieuDongCo = soChoNgoi = congSuat = trongTai = "";
                stt++;
                System.out.println("Co ton tai");
                if (ptgt instanceof OTo) {
                    OTo oTo = (OTo) ptgt;
                    loaiPhuongTien = "Ô tô";
                    kieuDongCo = oTo.getKieuDongCo();
                    soChoNgoi = Integer.toString(oTo.getSoChoNgoi());

                } else if (ptgt instanceof XeMay) {
                    XeMay xeMay = (XeMay) ptgt;
                    loaiPhuongTien = "Xe máy";
                    congSuat = Integer.toString(xeMay.getCongSuat());

                } else if (ptgt instanceof XeTai) {
                    XeTai xeTai = (XeTai) ptgt;
                    loaiPhuongTien = "Xe tải";
                    trongTai = Double.toString(xeTai.getTrongTai());

                }
                // thực hiện thêm một dòng vào model của table
                // thực hiện thêm một dòng vào model của table
                mdTblPhuongTien.addRow(new Object[]{
                    Integer.toString(stt),
                    loaiPhuongTien,
                    ptgt.getHangSanXuat(),
                    Integer.toString(ptgt.getNamSanXuat()),
                    Double.toString(ptgt.getGiaBan()),
                    ptgt.getMau(),
                    kieuDongCo,
                    soChoNgoi,
                    congSuat,
                    trongTai,});
            }

    }                                          

    }
    private void btnTimKiemTheoHangActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        phuongTien.clear();
        xoaDuLieuCuTrongModelTable();
        loadDataFromDb();

        String loaiPhuongTien, kieuDongCo, soChoNgoi, congSuat, trongTai;
        int stt = 0;
        // Xóa dữ liệu cũ trong model của table

        for (PTGT ptgt : phuongTien) {
            System.out.println(ptgt.getHangSanXuat());
            if (ptgt.getHangSanXuat().contains(txtTuKhoaTimKiem.getText().trim())) {

                loaiPhuongTien = kieuDongCo = soChoNgoi = congSuat = trongTai = "";
                stt++;
                if (ptgt instanceof OTo) {

                    System.out.println("co o to ne");
                    OTo oTo = (OTo) ptgt;
                    loaiPhuongTien = "Ô tô";
                    kieuDongCo = oTo.getKieuDongCo();
                    soChoNgoi = Integer.toString(oTo.getSoChoNgoi());

                } else if (ptgt instanceof XeMay) {
                    XeMay xeMay = (XeMay) ptgt;
                    loaiPhuongTien = "Xe máy";
                    congSuat = Integer.toString(xeMay.getCongSuat());

                } else if (ptgt instanceof XeTai) {
                    XeTai xeTai = (XeTai) ptgt;
                    loaiPhuongTien = "Xe tải";
                    trongTai = Double.toString(xeTai.getTrongTai());

                }
                mdTblPhuongTien.addRow(new Object[]{
                    Integer.toString(stt),
                    loaiPhuongTien,
                    ptgt.getHangSanXuat(),
                    Integer.toString(ptgt.getNamSanXuat()),
                    Double.toString(ptgt.getGiaBan()),
                    ptgt.getMau(),
                    kieuDongCo,
                    soChoNgoi,
                    congSuat,
                    trongTai,});

                // thực hiện thêm một dòng vào model của table
            }


    }                                                  

    }
    private void btnLamMoiActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        phuongTien.clear();
        xoaDuLieuCuTrongModelTable();
    }                                         

    private void cboLoaiPhuongTienActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyPTGT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyPTGT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyPTGT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyPTGT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyPTGT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCapNhat;
    private javax.swing.JButton btnLamMoi;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnTimKiemTheoHang;
    private javax.swing.JButton btnXoa;
    private javax.swing.JComboBox<String> cboLoaiPhuongTien;
    private javax.swing.JComboBox<String> cboMau;
    private javax.swing.JComboBox<String> cboNamSanXuat;
    private javax.swing.JComboBox<String> cboSoChoNgoi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPhuongTien;
    private javax.swing.JTextField txtCongSuat;
    private javax.swing.JTextField txtGiaBan;
    private javax.swing.JTextField txtHangSanXuat;
    private javax.swing.JTextField txtKieuDongCo;
    private javax.swing.JTextField txtTrongTai;
    private javax.swing.JTextField txtTuKhoaTimKiem;
    // End of variables declaration                   

    private void myInit() {
        // Lấy model hiện tại của tblPhuongTiens chứa các thành phần Header
        // Gán cho mdTblPhuongTien
        mdTblPhuongTien = (DefaultTableModel) tblPhuongTien.getModel();
        //Thiết lập model cho table
        tblPhuongTien.setModel(mdTblPhuongTien);
        //Khỏi tạo biến phuongTiens lưu giữ danh sách phương tiện
        phuongTien = new ArrayList<>();
        //Thiệt lập các giá trị đảm bảo chỉ nhập được theo loại Ô tô tại thời điểm ban đầu
        txtCongSuat.setEnabled(false);
        txtTrongTai.setEnabled(false);
        // Nạp năm vào cboNamSanXuat
        loadNamSanXuat();
        // Thiết lập hiển thị cửa sổ chính giữa màn hình        
        setLocationRelativeTo(null);
    }

    private void loadNamSanXuat() {
        int namHienTai = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = namHienTai; i >= 1920; i--) {
            ((DefaultComboBoxModel) cboNamSanXuat.getModel()).addElement(Integer.toString(i));
        }
    }

    private void loadDataFromDb() {
        try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
            String SQL = "SELECT * FROM phuongtien.oto;";
            ResultSet rs = stmt.executeQuery(SQL);
            while (rs.next()) {
                phuongTien.add(new OTo(rs.getString("kieuDongCo"), rs.getInt("soChoNgoi"), rs.getString("hangSanXuat"), rs.getInt("namSanXuat"), rs.getString("mau"), rs.getDouble("giaBan")));

            }
        } // Handle any errors that may have occurred.
        catch (SQLException e) {
            e.printStackTrace();
        }
        try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
            String SQL = "SELECT * FROM phuongtien.xemay;";
            ResultSet rs = stmt.executeQuery(SQL);
            while (rs.next()) {
                phuongTien.add(new XeMay(rs.getInt("congSuat"), rs.getString("hangSanXuat"), rs.getInt("namSanXuat"), rs.getString("mau"), rs.getDouble("giaBan")));
            }
        } // Handle any errors that may have occurred.
        catch (SQLException e) {
            e.printStackTrace();
        }
        try ( Connection con = DriverManager.getConnection(DB_URL, USER_NAME, PASSWORD);  Statement stmt = con.createStatement();) {
            String SQL = "SELECT * FROM phuongtien.xetai;";
            ResultSet rs = stmt.executeQuery(SQL);
            while (rs.next()) {
                phuongTien.add(new XeTai(rs.getDouble("trongTai"), rs.getString("hangSanXuat"), rs.getInt("namSanXuat"), rs.getString("mau"), rs.getDouble("giaBan")));
            }
        } // Handle any errors that may have occurred.
        catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void loadDataIntoTable() {

        String loaiPhuongTien, kieuDongCo, soChoNgoi, congSuat, trongTai;
        int stt = 0;
        // Xóa dữ liệu cũ trong model của table
        xoaDuLieuCuTrongModelTable();
        for (PTGT ptgt : phuongTien) {

            loaiPhuongTien = kieuDongCo = soChoNgoi = congSuat = trongTai = "";
            stt++;
            if (ptgt instanceof OTo) {
                OTo oTo = (OTo) ptgt;
                loaiPhuongTien = "Ô tô";
                kieuDongCo = oTo.getKieuDongCo();
                soChoNgoi = Integer.toString(oTo.getSoChoNgoi());
            } else if (ptgt instanceof XeMay) {
                XeMay xeMay = (XeMay) ptgt;
                loaiPhuongTien = "Xe máy";
                congSuat = Integer.toString(xeMay.getCongSuat());

            } else {
                XeTai xeTai = (XeTai) ptgt;
                loaiPhuongTien = "Xe tải";
                trongTai = Double.toString(xeTai.getTrongTai());
            }
            // thực hiện thêm một dòng vào model của table
            mdTblPhuongTien.addRow(new Object[]{
                Integer.toString(stt),
                loaiPhuongTien,
                ptgt.getHangSanXuat(),
                Integer.toString(ptgt.getNamSanXuat()),
                Double.toString(ptgt.getGiaBan()),
                ptgt.getMau(),
                kieuDongCo,
                soChoNgoi,
                congSuat,
                trongTai,});

        }

    }

    private void xoaDuLieuCuTrongModelTable() {
        mdTblPhuongTien.setRowCount(0);
        System.out.println(mdTblPhuongTien.getRowCount());
        if (mdTblPhuongTien.getRowCount() > 0) {
            for (int i = mdTblPhuongTien.getRowCount() - 1; i > -1; i--) {
                mdTblPhuongTien.removeRow(i);
            }
        }
    }

    private void setSelectedItemsForCbo(int row, int col, JComboBox cbo) {
        String duLieuTaiODuocChon = mdTblPhuongTien.getValueAt(row, col).toString();
        // Duyệ qua tất cả các phần tử của cbo
        for (int i = 0; i < cbo.getItemCount(); i++) {
            // Nếu phần tử napf trùng với dữ liệu tại ô được chọn 
            if (cbo.getItemAt(i).toString().equalsIgnoreCase(duLieuTaiODuocChon)) {
                cbo.setSelectedIndex(i);// Thiết lập chọn                
                return;// Thoát khỏi hàm
            }
        }
    }

    private void setTextForTextFiled(int row, int col, JTextField tf) {
        String duLieuTaiODuocChon = mdTblPhuongTien.getValueAt(row, col).toString();
        tf.setText(duLieuTaiODuocChon);
    }

}
